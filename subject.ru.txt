II Введение
    Целью этого проекта является создание сайта знакомств.
    Вам необходимо разработать приложение, которое облегчает взаимодействие между двумя потенциальными партнерами, 
    охватывая весь процесс от регистрации до финальной встречи.
    Пользователи должны иметь возможность регистрироваться, входить в систему, заполнять свой профиль, искать и просматривать профили других
    пользователей, а также выражать им интерес с помощью «лайка»(Поскольку «нравится» — неидеальный термин, вам следует найти более четкую  альтернативу). Они также должны иметь возможность общаться с теми, кто ответил им взаимностью.

III Общие инструкции

    • Ваше приложение не должно содержать ошибок, предупреждений или уведомлений, как на стороне сервера, так и на стороне клиента.
    • Для этого проекта вы можете использовать любой язык программирования по вашему выбору.
    • Вы можете использовать микрофреймворки и любые необходимые библиотеки для этого проекта.
    • Вы можете использовать библиотеки пользовательского интерфейса, такие как React, Angular, Vue, Bootstrap, Semantic или любую их комбинацию.
    • Уязвимости безопасности не допускаются. Вы должны выполнить как минимум обязательные требования безопасности, но мы настоятельно  рекомендуем вам выйти за их рамки — все зависит от этого.
    • Мы определяем «микрофреймворк» как тот, который включает маршрутизатор и, возможно, шаблонизацию, но не включает ORM, валидаторы или  менеджер учетных записей пользователей (Это определение будет иметь силу во время защиты, независимо от альтернативных определений,  найденных в Интернете). Пока вы придерживаетесь этих ограничений, вы можете использовать инструменты по вашему выбору.
    • Если вам нужно вдохновение, мы предлагаем использовать следующие языки в качестве основного
    выбора:
    ◦ Sinatra для Ruby.
    ◦ Express для Node (да, мы считаем это микрофреймворком).
    ◦ Flask для Python.
    ◦ Scalatra для Scala.
    ◦ Slim для PHP (Silex не допускается из-за его интеграции с Doctrine).
    ◦ Nickel для Rust.
    ◦ Goji для Golang.
    ◦ Spark для Java.
    ◦ Crow для C++.
    • Вам следует использовать реляционную или графоориентированную базу данных. База данных должна быть бесплатной, например MySQL, MariaDB,   PostgreSQL, Cassandra, InfluxDB, Neo4j и т. д. Вы должны вручную создавать свои запросы, как это делают опытные разработчики. Однако, если    вы умны, вы можете создать свою собственную библиотеку для упрощения управления запросами. Для оценки этого проекта ваша база данных должна    содержать не менее 500 различных профилей.
    • Вы можете выбрать веб-сервер, который лучше всего подходит вашим потребностям, будь то Apache, Nginx или встроенный веб-сервер.
    • Все ваше приложение должно быть совместимо как минимум с последними версиями Firefox и Chrome.
    • Ваш веб-сайт должен иметь хорошо структурированную структуру, включая как минимум заголовок, основной раздел и нижний колонтитул.
    • Ваш веб-сайт должен быть удобным для мобильных устройств и поддерживать приемлемую структуру на небольших экранах.
    • Все формы должны включать надлежащую проверку, а весь веб-сайт должен быть безопасным. Это обязательное требование, которое будет     тщательно оценено во время защиты. Чтобы дать вам представление, вот несколько примеров уязвимостей безопасности, которые не будут  допускаться:
    ◦ Хранение паролей в виде обычного текста в вашей базе данных.
    ◦ Разрешение внедрения HTML или JavaScript в незащищенные переменные.
    ◦ Разрешение загрузки несанкционированного контента. 
    ◦ Разрешение атак SQL-инъекций.

IV Обязательная часть
Вы должны разработать веб-приложение со следующими функциями:
IV.1 Регистрация и вход в систему
    Приложение должно позволять пользователю регистрироваться, предоставляя как минимум свой адрес электронной почты, имя пользователя,
    фамилию, имя и надежно защищенный пароль. Общеупотребительные английские слова не должны приниматься в качестве паролей.
    После регистрации пользователь должен получить электронное письмо с уникальной ссылкой для подтверждения своей учетной записи.
    Пользователи должны иметь возможность входить в систему, используя свое имя пользователя и пароль. Они также должны иметь
    возможность запросить электронное письмо для сброса пароля, если они забыли свой пароль. Кроме того, пользователи должны иметь возможность выходить из системы одним щелчком мыши с любой страницы сайта.
IV.2 Профиль пользователя
    • После входа в систему пользователи должны заполнить свой профиль, предоставив следующую информацию:
    ◦ Пол.
    ◦ Сексуальные предпочтения.
    ◦ Биография.
    ◦ Список интересов с использованием тегов (например, #веган, #гик, #пирсинг и т. д.), которые
    должны быть многоразовыми
    ◦ До 5 фотографий, включая одну, обозначенную как фотография профиля.
    • Пользователи должны иметь возможность изменять эту информацию в любое время, а также обновлять свою
    фамилию, имя и адрес электронной почты.
    • Пользователи должны иметь возможность видеть, кто просматривал их профиль.
    • Пользователи также должны иметь возможность видеть, кто им «нравится».
    • У каждого пользователя должен быть публичный «рейтинг известности» (Вы несете ответственность за определение того, что означает «рейтинг  известности», если ваши критерии последовательны).
    • Пользователи должны быть определены с помощью GPS-позиционирования вплоть до их района. Если пользователь
    отказывается от отслеживания местоположения, вы должны реализовать альтернативный метод определения их приблизительного местоположения, даже    без его явного согласия (Да, именно так и поступают сайты знакомств...). Пользователи также должны иметь возможность вручную настроить свое    местоположение GPS в своем профиле.
IV.3 Просмотр
    Пользователи должны иметь возможность легко получить доступ к списку предлагаемых профилей, которые соответствуют их предпочтениям.
    • Вы должны предлагать «интересные» профили. Например, гетеросексуальная женщина
    должна видеть только мужские профили. Вы также должны учитывать бисексуальность. Если пользователь
    не указал свою ориентацию, он должен считаться бисексуалом по умолчанию.
    • Совпадения должны определяться разумно (Учитывайте несколько критерие) на основе:
    ◦ Близости к географическому положению пользователя.
    ◦ Наибольшего количества общих тегов.
    ◦ Наивысшего «рейтинга известности».
    • Приоритет должен отдаваться пользователям в пределах одной географической области.
    • Список предлагаемых профилей должен сортироваться по возрасту, местоположению, «рейтингу известности» и
    общим тегам.
    • Пользователи должны иметь возможность фильтровать список по возрасту, местоположению, «рейтингу известности» и
    общим тегам.
IV.4 Исследование
    Пользователи должны иметь возможность выполнять расширенный поиск, выбрав один или несколько критериев, таких как:
    • Определенный возрастной диапазон.
    • Диапазон «рейтинга известности».
    • Местоположение.
    • Один или несколько тегов интересов.
    Подобно предлагаемому списку, результаты поиска должны быть сортируемыми и фильтруемыми по возрасту,
    местоположению, «рейтингу известности» и тегам интересов.
    IV.5 Просмотр профиля
    Пользователи должны иметь возможность просматривать профили других пользователей.
    Профили должны отображать всю доступную информацию, за исключением адреса электронной почты и пароля.
    Когда пользователь просматривает профиль, это должно быть записано в его истории посещений.
    Пользователь также должен иметь возможность:
    • «Нравится» фотографии профиля другого пользователя. Когда два пользователя взаимно «лайкают» профили друг друга, они будут считаться  «подключенными» и могут начать чат. Если у текущего
    пользователя нет фотографии профиля, он не может выполнить это действие.
    • Удалить ранее поставленную «лайк». Это предотвратит дальнейшие уведомления от этого
    пользователя, и функция чата между ними будет отключена.
    • Проверить «рейтинг известности» другого пользователя.
    • Посмотреть, находится ли пользователь в данный момент в сети, и если нет, посмотреть дату и время его последнего подключения.
    • Сообщить о пользователе как о «поддельной учетной записи».
    • Заблокировать пользователя. Заблокированный пользователь больше не будет отображаться в результатах поиска или генерировать
    уведомления. Кроме того, общение с ними больше не будет возможно.
    Пользователи должны четко видеть, «понравился» ли им просматриваемый ими профиль или они уже «подключены». У них также должна быть  возможность «отменить лайк» или отключиться от этого
    профиля.
IV.6 Чат
    Когда два пользователя подключены ( Это значит, что они взаимно «лайкнули» друг друга), они должны иметь возможность «общаться» в режиме    реального времени(с максимальной задержкой 10 секунд).
    Реализация функции чата остается на ваше усмотрение. Однако пользователи должны иметь возможность видеть,
    с любой страницы, когда они получают новое сообщение.
IV.7 Уведомления
    Пользователи должны получать уведомления в режиме реального времени6
    для следующих событий:
    • Когда они получают «лайк».
    • Когда их профиль был просмотрен.
    • Когда они получают сообщение.
    • Когда пользователь, которому они «понравились», также «лайкает» их в ответ.
    • Когда подключенный пользователь «отменяет лайк».
    Пользователи должны иметь возможность видеть с любой страницы, когда у них есть непрочитанные уведомления.
    По соображениям безопасности все учетные данные, ключи API, переменные среды и т. д. должны храниться локально в файле .env и исключаться из    Git. Публичное хранение учетных данных может привести к сбою проекта.

Бонусная часть

    Ниже приведены возможные бонусные функции, которые вы можете реализовать, чтобы заработать дополнительные баллы:
    • Добавьте стратегии OmniAuth для аутентификации пользователей.
    • Разрешите пользователям создавать персональную фотогалерею с загрузкой методом перетаскивания и базовым редактированием изображений   (например, обрезкой, поворотом, применением фильтров).
    • Разработайте интерактивную карту пользователей, требующую более точной локализации GPS с помощью
    JavaScript.
    • Интегрируйте видео- или аудиочат для подключенных пользователей.
    • Реализуйте функцию планирования и организации реальных свиданий или мероприятий для соответствующих
    пользователей.
    Бонусная часть будет оцениваться только в том случае, если обязательная часть
    идеальна. «Идеально» означает, что обязательные функции были
    полностью реализованы и работают без каких-либо сбоев. Если вы
    не выполнили ВСЕ обязательные требования, ваши бонусные функции
    не будут оцениваться.

Отправка и оценка

    Отправьте свое задание в свой репозиторий Git, как обычно. Только работа внутри вашего
    репозитория будет оцениваться во время защиты. Обязательно дважды проверьте имена
    ваших папок и файлов, чтобы убедиться, что они верны.
    VI.1 Экспертная оценка
    • Ваш код не должен выдавать никаких ошибок, предупреждений или уведомлений, ни на стороне сервера, ни на стороне клиента (в веб-консоли).
    • Все, что явно не разрешено, строго запрещено.
    • Любое нарушение безопасности приведет к оценке 0. Как минимум, вы должны реализовать
    меры безопасности, описанные в общих инструкциях. Это включает:
    ◦ Обеспечение того, чтобы пароли не хранились в базе данных в виде обычного текста.
    ◦ Защита от атак с использованием SQL-инъекций.
    ◦ Проверка всех вводимых данных форм и загрузок файлов.